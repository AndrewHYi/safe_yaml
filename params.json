{"tagline":"Parse YAML safely, without that pesky arbitrary code execution vulnerability.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"SafeYAML","body":"The **SafeYAML** gem provides an alternative implementation of `YAML.load` suitable for accepting user input in Ruby applications. Unlike Ruby's built-in implementation of `YAML.load`, SafeYAML's version will not expose apps to arbitrary code execution exploits (such as [the one recently discovered in Rails](http://www.reddit.com/r/netsec/comments/167c11/serious_vulnerability_in_ruby_on_rails_allowing/)).\r\n\r\nInstallation\r\n------------\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem \"safe_yaml\"\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install safe_yaml\r\n\r\nUsage\r\n-----\r\n\r\nSuppose your application were to contain some code like this:\r\n\r\n```ruby\r\nclass ExploitableClassBuilder\r\n  def []=(key, value)\r\n    @class ||= Class.new\r\n\r\n    @class.class_eval <<-EOS\r\n      def #{key}\r\n        #{value}\r\n      end\r\n    EOS\r\n  end\r\n\r\n  def create\r\n    @class.new\r\n  end\r\nend\r\n```\r\n\r\nNow, if you were to use `YAML.load` on user input anywhere in your application without the SafeYAML gem installed, an attacker could make a request with a carefully-crafted YAML string to execute arbitrary code (yes, including `system(\"unix command\")`) on your servers.\r\n\r\nObserve:\r\n\r\n    > yaml = <<-EOYAML\r\n    > --- !ruby/hash:ExploitableClassBuilder\r\n    > \"foo; end; puts %(I'm in yr system!); def bar\": \"baz\"\r\n    > EOYAML\r\n    => \"--- !ruby/hash:ExploitableClassBuilder\\n\\\"foo; end; puts %(I'm in yr system!); def bar\\\": \\\"baz\\\"\\n\"\r\n    \r\n    > YAML.load(yaml)\r\n    I'm in yr system!\r\n    => #<ExploitableClassBuilder:0x007fdbbe2e25d8 @class=#<Class:0x007fdbbe2e2510>>\r\n\r\nWith `YAML.safe_load`, that attacker would be thwarted:\r\n\r\n    > require \"safe_yaml\"\r\n    => true\r\n    > YAML.load(yaml)\r\n    => {\"foo; end; puts %(I'm in yr system!); def bar\"=>\"baz\"}\r\n\r\nNotes\r\n-----\r\n\r\nThe way that SafeYAML works is by restricting the kinds of objects that can be deserialized via `YAML.load`. More specifically, only the following types of objects can be deserialized by default:\r\n\r\n- Hashes\r\n- Arrays\r\n- Strings\r\n- Numbers\r\n- Dates\r\n- Booleans\r\n- Nils\r\n\r\nAdditionally, symbols will also be deserialized if the `YAML.enable_symbol_parsing` option is set to `true`.\r\n\r\nFor scenarios where the data to be parsed is from a trusted source and it is still desirable to deserialize arbitrary Ruby objects, the original implementation of `YAML.load` is available as `YAML.orig_load`.\r\n\r\nRequirements\r\n------------\r\n\r\nSafeYAML requires Ruby 1.8.7 or newer and works with both [Syck](http://www.ruby-doc.org/stdlib-1.8.7/libdoc/yaml/rdoc/YAML.html) and [Psych](http://github.com/tenderlove/psych).\r\n"}